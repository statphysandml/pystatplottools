from pystatplottools.distributions.distributionDD import DistributionDD


class JointDistribution(DistributionDD):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def compute(
            self, axes_indices,
            statistic='count',
            nbins=[],  # Refers to the number of bins in each dimension
            # Range accepts None, Scalar and List
            range_min=None,  # Refers to the ranges of the bins in the different dimension of axes_indices
            range_max=None,  # Refers to the ranges of the bins in the different dimension of axes_indices
            bin_scales='linear',
            with_binnumber=False
    ):
        """
        Computes a joint probability distribution/histogram of axes_indices over binned values of the data frame
        self.data
        :param axes_indices: list of column indices - random variables of the joint distribution
        :param statistic: "probability" or "count" - statistic to be computed
        :param nbins: scalar of list - number of bins in each dimensions
        :param range_min: None, scalar or list - minimum of the ranges of the bins in the different dimension of axes_indices
        :param range_max: None, scalar or list - maximum of ranges of the bins in the different dimension of axes_indices
        :param bin_scales: scalar or list - "linear" or "logarithmic" - possibility to introduce another scale for the bins
        :param with_binnumber: assign binned_numbers are also returned for each value in self.data
        :return: dictionary that contains for each dataframe a histogram. The histograms can be accessed via
            [df][statistic]
        """

        self._axes_indices = axes_indices

        self._distribution = self._compute_binned_statistics(
            axes_indices=self._axes_indices, columns=None, statistic=statistic, transform="lin", nbins=nbins,
            range_min=range_min, range_max=range_max, bin_scales=bin_scales, with_binnumber=with_binnumber)

    def linearize(self, output_statistics_name=None, dataframes_as_columns=False, bin_alignment="center"):
        """
        Generates a linearlized dataframe from a joint_distribution.
        :param axes_indices: random variables of the joint distribution
        :param joint_distribution: joint distribution generated by joint_distribution()
        :param output_statistics_name: optional definition of the name of the joint distribution
        :return: A dataframe with multiindex (df, idx) and columns (bin_center..., distribution val)
        """
        linearized_joint_distribution = DistributionDD._linearize_binned_statistics(
            axes_indices=self._axes_indices, binned_statistics=self._distribution,
            output_statistics_names=output_statistics_name,
            dataframes_as_columns=dataframes_as_columns, bin_alignment=bin_alignment
        )
        return linearized_joint_distribution